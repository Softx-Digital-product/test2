!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Candy Crush</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="game-container">
        <div class="game-board">
            <!-- Game board will be generated here -->
        </div>
        <div class="score-container">
            <p>Score: <span id="score">0</span></p>
        </div>
    </div>
                        <h1> Hello world</h1>
    <script src="script.js"></script>
    .game-container {
        width: 400px;
        margin: 40px auto;
        text-align: center;
    }
    
    .game-board {
        display: grid;
        grid-template-columns: repeat(8, 1fr);
        grid-gap: 10px;
    }
    
    .candy {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #fff;
        display: inline-block;
        margin: 5px;
    }
    
    .candy.red {
        background-color: #FF69B4;
    }
    
    .candy.orange {
        background-color: #FFC107;
    }
    
    .candy.yellow {
        background-color: #F7DC6F;
    }
    
    .candy.green {
        background-color: #34C759;
    }
    
    .candy.blue {
        background-color: #45B3FA;
    }
    
    .score-container {
        margin-top: 20px;
    }
    
    #score {
        font-size: 24px;
        font-weight: bold;
    }
    // Game constants
const GAME_BOARD_SIZE = 8;
const CANDY_TYPES = ['red', 'orange', 'yellow', 'green', 'blue'];
const SCORE_PER_MATCH = 10;

// Game variables
let gameBoard = [];
let score = 0;

// Function to generate the game board
function generateGameBoard() {
    for (let i = 0; i < GAME_BOARD_SIZE; i++) {
        gameBoard[i] = [];
        for (let j = 0; j < GAME_BOARD_SIZE; j++) {
            const candyType = CANDY_TYPES[Math.floor(Math.random() * CANDY_TYPES.length)];
            gameBoard[i][j] = { type: candyType, x: j, y: i };
        }
    }
}

// Function to render the game board
function renderGameBoard() {
    const gameBoardElement = document.querySelector('.game-board');
    gameBoardElement.innerHTML = '';
    for (let i = 0; i < GAME_BOARD_SIZE; i++) {
        for (let j = 0; j < GAME_BOARD_SIZE; j++) {
            const candyElement = document.createElement('div');
            candyElement.className = `candy ${gameBoard[i][j].type}`;
            gameBoardElement.appendChild(candyElement);
        }
    }
}

// Function to handle candy swaps
function handleCandySwap(x1, y1, x2, y2) {
    // Swap candies
    const temp = gameBoard[y1][x1];
    gameBoard[y1][x1] = gameBoard[y2][x2];
    gameBoard[y2][x2] = temp;

    // Check for matches
    checkForMatches();
}

// Function to check for matches
function checkForMatches() {
    // Iterate through the game board
    for (let i = 0; i < GAME_BOARD_SIZE; i++) {
        for (let j = 0; j < GAME_BOARD_SIZE; j++) {
            // Check horizontal matches
            if (j < GAME_BOARD_SIZE - 2 && gameBoard[i][j].type === gameBoard[i][j + 1].type && gameBoard[i][j].type === gameBoard[i][j + 2].type) {
                score += SCORE_PER_MATCH;
                // Remove matched candies
                gameBoard[i][j] = null;
                gameBoard[i][j + 1] = null;
                gameBoard[i][j + 2] = null;
            }

            // Check vertical matches
            if (i < GAME_BOARD_SIZE - 2 && gameBoard[i][j].type === gameBoard[i + 1][j].type && gameBoard[i
</body>
</html>
